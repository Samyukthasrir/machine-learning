import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        self.weights_input_hidden = np.random.randn(input_size, hidden_size)
        self.biases_input_hidden = np.zeros((1, hidden_size))
        
        self.weights_hidden_output = np.random.randn(hidden_size, output_size)
        self.biases_hidden_output = np.zeros((1, output_size))
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return x * (1 - x)
    
    def forward(self, inputs):
        self.hidden_sum = np.dot(inputs, self.weights_input_hidden) + self.biases_input_hidden
        self.hidden_output = self.sigmoid(self.hidden_sum)
        
        self.output_sum = np.dot(self.hidden_output, self.weights_hidden_output) + self.biases_hidden_output
        self.output = self.sigmoid(self.output_sum)
        
        return self.output
    
    def backward(self, inputs, targets, learning_rate):
        error = targets - self.output
        output_delta = error * self.sigmoid_derivative(self.output)
        
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * self.sigmoid_derivative(self.hidden_output)
        
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * learning_rate
        self.biases_hidden_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate
        self.weights_input_hidden += inputs.T.dot(hidden_delta) * learning_rate
        self.biases_input_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate
        
    def train(self, inputs, targets, learning_rate, epochs):
        for epoch in range(epochs):
            output = self.forward(inputs)
            self.backward(inputs, targets, learning_rate)
            loss = np.mean(np.square(targets - output))
            if epoch % 1000 == 0:
                print(f'Epoch {epoch}, Loss: {loss}')
