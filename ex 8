import numpy as np

class LinearRegression:
    def __init__(self, learning_rate=0.01, n_iterations=1000):
        self.learning_rate = learning_rate
        self.n_iterations = n_iterations
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        # Gradient descent
        for _ in range(self.n_iterations):
            y_predicted = np.dot(X, self.weights) + self.bias
            # Compute gradients
            dw = (1 / n_samples) * np.dot(X.T, (y_predicted - y))
            db = (1 / n_samples) * np.sum(y_predicted - y)
            # Update parameters
            self.weights -= self.learning_rate * dw
            self.bias -= self.learning_rate * db

    def predict(self, X):
        return np.dot(X, self.weights) + self.bias

# Example usage:
if __name__ == "__main__":
    # Sample data
    X = np.array([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])
    y = np.array([2, 4, 6, 8, 10])

    # Initialize and train the Linear Regression model
    lr = LinearRegression()
    lr.fit(X, y)

    # Test data
    X_test = np.array([[6, 6], [7, 7]])

    # Make predictions
    predictions = lr.predict(X_test)

    print("Predictions:", predictions)
